{
  "src": {
    "actions": {
      "auth.ts": "'use server';\n\nimport { cookies } from 'next/headers';\nimport {\n  createUserWithEmailAndPassword,\n  signInWithEmailAndPassword,\n} from 'firebase/auth';\nimport { auth } from '@/lib/firebase';\n\nexport async function signUp(email: string, password: string) {\n  try {\n    const userCredential = await createUserWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const { user } = userCredential;\n\n    // Store the user token in an encrypted cookie\n    const cookiesStore = await cookies();\n    cookiesStore.set('session', await user.getIdToken(), {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 * 7, // 1 week\n    });\n\n    return { success: true };\n  } catch (error: unknown) {\n    return { error: (error as Error).message };\n  }\n}\n\nexport async function signIn(email: string, password: string) {\n  try {\n    const userCredential = await signInWithEmailAndPassword(\n      auth,\n      email,\n      password\n    );\n    const { user } = userCredential;\n\n    const cookiesStore = await cookies();\n    cookiesStore.set('session', await user.getIdToken(), {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'lax',\n      maxAge: 60 * 60 * 24 * 7, // 1 week\n    });\n\n    return { success: true };\n  } catch (error: unknown) {\n    return { error: (error as Error).message };\n  }\n}\n\nexport async function logout() {\n  const cookiesStore = await cookies();\n  cookiesStore.delete('session');\n  await auth.signOut();\n  return { success: true };\n}\n",
      "songs.ts": "'use server';\n\nimport { db } from '@/lib/firebase';\nimport {\n  collection,\n  addDoc,\n  getDocs,\n  doc,\n  updateDoc,\n  deleteDoc,\n  query,\n  orderBy,\n} from 'firebase/firestore';\n\nexport interface Song {\n  id?: string;\n  title: string;\n  artist: string;\n  album?: string;\n  year?: number;\n  genre?: string;\n  createdAt?: Date;\n}\n\nexport async function addSong(song: Omit<Song, 'id' | 'createdAt'>) {\n  try {\n    const docRef = await addDoc(collection(db, 'songs'), {\n      ...song,\n      createdAt: new Date(),\n    });\n    return { id: docRef.id, success: true };\n  } catch (error: unknown) {\n    return { error: (error as Error).message };\n  }\n}\n\nexport async function getSongs() {\n  try {\n    const songsQuery = query(\n      collection(db, 'songs'),\n      orderBy('createdAt', 'desc')\n    );\n    const snapshot = await getDocs(songsQuery);\n    const songs = snapshot.docs.map((doc) => ({\n      id: doc.id,\n      ...doc.data(),\n    })) as Song[];\n    return songs;\n  } catch (error: unknown) {\n    return { error: (error as Error).message };\n  }\n}\n\nexport async function updateSong(id: string, data: Partial<Song>) {\n  try {\n    await updateDoc(doc(db, 'songs', id), data);\n    return { success: true };\n  } catch (error: unknown) {\n    return { error: (error as Error).message };\n  }\n}\n\nexport async function deleteSong(id: string) {\n  try {\n    await deleteDoc(doc(db, 'songs', id));\n    return { success: true };\n  } catch (error: unknown) {\n    return { error: (error as Error).message };\n  }\n}\n"
    },
    "app": {
      "globals.css": "@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --foreground-rgb: 255, 255, 255;\n  --background-start-rgb: 13, 13, 13;\n  --background-end-rgb: 23, 23, 23;\n}\n\nbody {\n  color: rgb(var(--foreground-rgb));\n  background: linear-gradient(to bottom,\n      rgb(var(--background-start-rgb)),\n      rgb(var(--background-end-rgb)));\n}",
      "layout.tsx": "import type { Metadata } from \"next\"\nimport localFont from \"next/font/local\"\nimport \"./globals.css\"\n\nconst geistSans = localFont({\n  src: \"./fonts/GeistVF.woff\",\n  variable: \"--font-geist-sans\",\n  weight: \"100 900\",\n})\nconst geistMono = localFont({\n  src: \"./fonts/GeistMonoVF.woff\",\n  variable: \"--font-geist-mono\",\n  weight: \"100 900\",\n})\n\nexport const metadata: Metadata = {\n  title: \"Next Firebase Example\",\n  description: \"Next.js + Firebase Example\",\n}\n\nexport default function RootLayout ({\n  children,\n}: Readonly<{\n  children: React.ReactNode\n}>) {\n  return (\n    <html lang=\"en\">\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} bg-gray-900 text-gray-100 min-h-screen antialiased`}\n      >\n        {children}\n      </body>\n    </html>\n  )\n}\n",
      "login": {
        "page.tsx": "import LoginForm from '@/components/auth/login'\nimport Link from 'next/link'\n\nexport default function LoginPage () {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-purple-500\">Welcome Back</h1>\n          <p className=\"mt-2 text-gray-400\">Login to your music collection</p>\n        </div>\n\n        <LoginForm />\n\n        <p className=\"mt-4 text-center\">\n          Don&apos;t have an account?{' '}\n          <Link href=\"/register\" className=\"text-purple-500 hover:text-purple-400\">\n            Register here\n          </Link>\n        </p>\n      </div>\n    </div>\n  )\n}"
      },
      "page.tsx": "import RegisterForm from '@/components/auth/register-form'\nimport Link from 'next/link'\n\nexport default function RegisterPage () {\n  return (\n    <div className=\"min-h-screen flex items-center justify-center px-4\">\n      <div className=\"max-w-md w-full space-y-8\">\n        <div className=\"text-center\">\n          <h1 className=\"text-3xl font-bold text-purple-500\">Create Account</h1>\n          <p className=\"mt-2 text-gray-400\">Join to manage your music collection</p>\n        </div>\n\n        <RegisterForm />\n\n        <p className=\"mt-4 text-center\">\n          Already have an account?{' '}\n          <Link href=\"/login\" className=\"text-purple-500 hover:text-purple-400\">\n            Login here\n          </Link>\n        </p>\n      </div>\n    </div>\n  )\n}",
      "songs": {
        "page.tsx": "import { cookies } from 'next/headers'\nimport { redirect } from 'next/navigation'\nimport SongDashboard from './song-dashboard'\n\nexport default async function SongsPage () {\n  const cookiesStore = await cookies()\n  const session = cookiesStore.get('session')\n\n  if (!session) {\n    redirect('/login')\n  }\n\n  return <SongDashboard />\n}",
        "song-dashboard.tsx": "'use client'\n\nimport { useState } from 'react'\nimport { Song } from '@/actions/songs'\nimport SongList from '@/components/songs/song-list'\nimport SongForm from '@/components/songs/song-form'\nimport { logout } from '@/actions/auth'\nimport { useRouter } from 'next/navigation'\nimport { Plus, LogOut } from 'lucide-react'\n\nexport default function SongDashboard () {\n  const [showForm, setShowForm] = useState(false)\n  const [editingSong, setEditingSong] = useState<Song | undefined>()\n  const router = useRouter()\n\n  const handleLogout = async () => {\n    await logout()\n    router.push('/login')\n  }\n\n  const handleEdit = (song: Song) => {\n    setEditingSong(song)\n    setShowForm(true)\n  }\n\n  const handleFormSuccess = () => {\n    setShowForm(false)\n    setEditingSong(undefined)\n  }\n\n  return (\n    <div className=\"min-h-screen p-6\">\n      <div className=\"max-w-6xl mx-auto\">\n        <header className=\"flex items-center justify-between mb-8\">\n          <h1 className=\"text-3xl font-bold text-purple-500\">My Music Collection</h1>\n          <div className=\"flex items-center space-x-4\">\n            <button\n              onClick={() => setShowForm(true)}\n              className=\"flex items-center px-4 py-2 bg-purple-600 hover:bg-purple-700 rounded-md transition-colors\"\n            >\n              <Plus size={20} className=\"mr-2\" />\n              Add Song\n            </button>\n            <button\n              onClick={handleLogout}\n              className=\"flex items-center px-4 py-2 bg-gray-700 hover:bg-gray-600 rounded-md transition-colors\"\n            >\n              <LogOut size={20} className=\"mr-2\" />\n              Logout\n            </button>\n          </div>\n        </header>\n\n        {showForm && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4\">\n            <div className=\"bg-gray-800 rounded-lg p-6 max-w-md w-full\">\n              <h2 className=\"text-xl font-semibold mb-4 text-purple-500\">\n                {editingSong ? 'Edit Song' : 'Add New Song'}\n              </h2>\n              <SongForm\n                song={editingSong}\n                onSuccess={handleFormSuccess}\n                onCancel={() => {\n                  setShowForm(false)\n                  setEditingSong(undefined)\n                }}\n              />\n            </div>\n          </div>\n        )}\n\n        <SongList onEdit={handleEdit} />\n      </div>\n    </div>\n  )\n}"
      }
    },
    "components": {
      "auth": {
        "login.tsx": "'use client'\n\nimport { useState } from 'react'\nimport { signIn } from '@/actions/auth'\nimport { useRouter } from 'next/navigation'\n\nexport default function LoginForm () {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n  const router = useRouter()\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    const result = await signIn(email, password)\n\n    if (result.error) {\n      setError(result.error)\n      setLoading(false)\n    } else {\n      router.push('/songs')\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4 max-w-sm mx-auto\">\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200\">\n          Email\n        </label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:ring-purple-500 focus:border-purple-500\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-200\">\n          Password\n        </label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:ring-purple-500 focus:border-purple-500\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n      </div>\n      {error && (\n        <p className=\"text-red-500 text-sm\">{error}</p>\n      )}\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md transition-colors disabled:opacity-50\"\n      >\n        {loading ? 'Logging in...' : 'Login'}\n      </button>\n    </form>\n  )\n}",
        "register-form.tsx": "'use client'\n\nimport { useState } from 'react'\nimport { signUp } from '@/actions/auth'\n\nexport default function RegisterForm () {\n  const [email, setEmail] = useState('')\n  const [password, setPassword] = useState('')\n  const [error, setError] = useState('')\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n    setError('')\n\n    const result = await signUp(email, password)\n\n    if (result.error) {\n      setError(result.error)\n    }\n\n    setLoading(false)\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4 max-w-sm mx-auto\">\n      <div>\n        <label htmlFor=\"email\" className=\"block text-sm font-medium text-gray-200\">\n          Email\n        </label>\n        <input\n          type=\"email\"\n          id=\"email\"\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:ring-purple-500 focus:border-purple-500\"\n          value={email}\n          onChange={(e) => setEmail(e.target.value)}\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"password\" className=\"block text-sm font-medium text-gray-200\">\n          Password\n        </label>\n        <input\n          type=\"password\"\n          id=\"password\"\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100 focus:ring-purple-500 focus:border-purple-500\"\n          value={password}\n          onChange={(e) => setPassword(e.target.value)}\n          required\n        />\n      </div>\n      {error && (\n        <p className=\"text-red-500 text-sm\">{error}</p>\n      )}\n      <button\n        type=\"submit\"\n        disabled={loading}\n        className=\"w-full px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md transition-colors disabled:opacity-50\"\n      >\n        {loading ? 'Registering...' : 'Register'}\n      </button>\n    </form>\n  )\n}"
      },
      "songs": {
        "song-form.tsx": "'use client'\n\nimport { useState } from 'react'\nimport { addSong, updateSong, Song } from '@/actions/songs'\n\ninterface SongFormProps {\n  song?: Song\n  onSuccess?: () => void\n  onCancel?: () => void\n}\n\nexport default function SongForm ({ song, onSuccess, onCancel }: SongFormProps) {\n  const [formData, setFormData] = useState({\n    title: song?.title || '',\n    artist: song?.artist || '',\n    album: song?.album || '',\n    year: song?.year || undefined,\n    genre: song?.genre || ''\n  })\n  const [loading, setLoading] = useState(false)\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault()\n    setLoading(true)\n\n    if (song?.id) {\n      await updateSong(song.id, formData)\n    } else {\n      await addSong(formData)\n    }\n\n    setLoading(false)\n    onSuccess?.()\n  }\n\n  return (\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\n      <div>\n        <label htmlFor=\"title\" className=\"block text-sm font-medium text-gray-200\">\n          Title\n        </label>\n        <input\n          type=\"text\"\n          id=\"title\"\n          value={formData.title}\n          onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100\"\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"artist\" className=\"block text-sm font-medium text-gray-200\">\n          Artist\n        </label>\n        <input\n          type=\"text\"\n          id=\"artist\"\n          value={formData.artist}\n          onChange={(e) => setFormData(prev => ({ ...prev, artist: e.target.value }))}\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100\"\n          required\n        />\n      </div>\n      <div>\n        <label htmlFor=\"album\" className=\"block text-sm font-medium text-gray-200\">\n          Album\n        </label>\n        <input\n          type=\"text\"\n          id=\"album\"\n          value={formData.album}\n          onChange={(e) => setFormData(prev => ({ ...prev, album: e.target.value }))}\n          className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100\"\n        />\n      </div>\n      <div className=\"grid grid-cols-2 gap-4\">\n        <div>\n          <label htmlFor=\"year\" className=\"block text-sm font-medium text-gray-200\">\n            Year\n          </label>\n          <input\n            type=\"number\"\n            id=\"year\"\n            value={formData.year || ''}\n            onChange={(e) => setFormData(prev => ({ ...prev, year: parseInt(e.target.value) }))}\n            className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100\"\n          />\n        </div>\n        <div>\n          <label htmlFor=\"genre\" className=\"block text-sm font-medium text-gray-200\">\n            Genre\n          </label>\n          <input\n            type=\"text\"\n            id=\"genre\"\n            value={formData.genre}\n            onChange={(e) => setFormData(prev => ({ ...prev, genre: e.target.value }))}\n            className=\"mt-1 block w-full px-3 py-2 bg-gray-800 border border-gray-700 rounded-md text-gray-100\"\n          />\n        </div>\n      </div>\n      <div className=\"flex justify-end space-x-2\">\n        {onCancel && (\n          <button\n            type=\"button\"\n            onClick={onCancel}\n            className=\"px-4 py-2 bg-gray-700 hover:bg-gray-600 text-gray-100 rounded-md\"\n          >\n            Cancel\n          </button>\n        )}\n        <button\n          type=\"submit\"\n          disabled={loading}\n          className=\"px-4 py-2 bg-purple-600 hover:bg-purple-700 text-white rounded-md disabled:opacity-50\"\n        >\n          {loading ? 'Saving...' : song?.id ? 'Update Song' : 'Add Song'}\n        </button>\n      </div>\n    </form>\n  )\n}",
        "song-list.tsx": "'use client'\n\nimport { useState, useEffect } from 'react'\nimport { Song, getSongs, deleteSong } from '@/actions/songs'\nimport { Music, Pencil, Trash2 } from 'lucide-react'\n\ninterface SongListProps {\n  onEdit: (song: Song) => void\n}\n\nexport default function SongList ({ onEdit }: SongListProps) {\n  const [songs, setSongs] = useState<Song[]>([])\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    loadSongs()\n  }, [])\n\n  const loadSongs = async () => {\n    const result = await getSongs()\n    if (Array.isArray(result)) {\n      setSongs(result)\n    }\n    setLoading(false)\n  }\n\n  const handleDelete = async (id: string) => {\n    if (confirm('Are you sure you want to delete this song?')) {\n      await deleteSong(id)\n      loadSongs()\n    }\n  }\n\n  if (loading) {\n    return <div className=\"text-center py-8\">Loading songs...</div>\n  }\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n      {songs.map((song) => (\n        <div\n          key={song.id}\n          className=\"p-4 bg-gray-800 rounded-lg border border-gray-700 hover:border-purple-500 transition-colors\"\n        >\n          <div className=\"flex items-start justify-between\">\n            <div className=\"flex items-center space-x-3\">\n              <Music className=\"text-purple-500\" />\n              <div>\n                <h3 className=\"font-medium text-gray-100\">{song.title}</h3>\n                <p className=\"text-sm text-gray-400\">{song.artist}</p>\n              </div>\n            </div>\n            <div className=\"flex space-x-2\">\n              <button\n                onClick={() => onEdit(song)}\n                className=\"p-1 hover:text-purple-500 transition-colors\"\n              >\n                <Pencil size={16} />\n              </button>\n              <button\n                onClick={() => song.id && handleDelete(song.id)}\n                className=\"p-1 hover:text-red-500 transition-colors\"\n              >\n                <Trash2 size={16} />\n              </button>\n            </div>\n          </div>\n          {(song.album || song.year || song.genre) && (\n            <div className=\"mt-2 text-sm text-gray-400\">\n              {song.album && <p>Album: {song.album}</p>}\n              {song.year && <p>Year: {song.year}</p>}\n              {song.genre && <p>Genre: {song.genre}</p>}\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  )\n}"
      }
    },
    "lib": {
      "firebase": {
        "index.ts": "import { initializeApp, getApps } from 'firebase/app';\nimport { getAuth } from 'firebase/auth';\nimport { getFirestore } from 'firebase/firestore';\n\nconst firebaseConfig = {\n  apiKey: process.env.NEXT_PUBLIC_FIREBASE_API_KEY,\n  authDomain: process.env.NEXT_PUBLIC_FIREBASE_AUTH_DOMAIN,\n  projectId: process.env.NEXT_PUBLIC_FIREBASE_PROJECT_ID,\n  storageBucket: process.env.NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET,\n  messagingSenderId: process.env.NEXT_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,\n  appId: process.env.NEXT_PUBLIC_FIREBASE_APP_ID,\n};\n\nconst app =\n  getApps().length === 0 ? initializeApp(firebaseConfig) : getApps()[0];\nconst auth = getAuth(app);\nconst db = getFirestore(app);\n\nexport { app, auth, db };\n"
      }
    },
    "middleware.ts": "import { NextResponse } from 'next/server';\nimport type { NextRequest } from 'next/server';\n\nexport function middleware(request: NextRequest) {\n  const session = request.cookies.get('session');\n\n  // Rutas públicas que no requieren autenticación\n  if (\n    request.nextUrl.pathname === '/login' ||\n    request.nextUrl.pathname === '/register'\n  ) {\n    if (session) {\n      return NextResponse.redirect(new URL('/songs', request.url));\n    }\n    return NextResponse.next();\n  }\n\n  // Rutas protegidas que requieren autenticación\n  if (!session) {\n    return NextResponse.redirect(new URL('/login', request.url));\n  }\n\n  return NextResponse.next();\n}\n\nexport const config = {\n  matcher: ['/songs/:path*', '/login', '/register'],\n};\n",
    "provider": {
      "auth-context.tsx": "import { createContext, useContext, useEffect, useState } from 'react'\nimport {\n  User,\n  onAuthStateChanged,\n  signInWithEmailAndPassword,\n  signOut,\n  createUserWithEmailAndPassword,\n} from 'firebase/auth'\nimport { auth } from '@/lib/firebase'\n\ninterface AuthContextType {\n  user: User | null\n  loading: boolean\n  signIn: (email: string, password: string) => Promise<void>\n  signUp: (email: string, password: string) => Promise<void>\n  signOut: () => Promise<void>\n}\n\nconst AuthContext = createContext<AuthContextType>({} as AuthContextType)\n\nexport function AuthProvider ({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const unsubscribe = onAuthStateChanged(auth, (user) => {\n      setUser(user)\n      setLoading(false)\n    })\n\n    return unsubscribe\n  }, [])\n\n  const signIn = async (email: string, password: string) => {\n    await signInWithEmailAndPassword(auth, email, password)\n  }\n\n  const signUp = async (email: string, password: string) => {\n    await createUserWithEmailAndPassword(auth, email, password)\n  }\n\n  const logout = async () => {\n    await signOut(auth)\n  }\n\n  return (\n    <AuthContext.Provider value={{ user, loading, signIn, signUp, signOut: logout }}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\nexport const useAuth = () => useContext(AuthContext)\n"
    }
  }
}